/* Zone de commentaire 
La synthaxe de base de la CSS
La syntahxe est composés de 3 éléments :
    - le sélecteur : sur quel élément la mise en forme doit s'appliquer
    - la propriété : quelle mise en forme on souhaite donner à ce selecteur (couleur, taille ...)
    - la valeur pour cette propriété (rouge, 12px, ...)

exemple : 
    selecteur  {
        propriété : valeur;
        propriété2 : valeur2;
        ...
    }
*/

/*! Generated by Font Squirrel (https://www.fontsquirrel.com) on September 11, 2018 */
/* Chargement de la police */
@font-face {
    font-family: 'arbutus_slabregular';
    src: url('../fonts/arbutusslab-regular-webfont.woff2') format('woff2'),
         url('../fonts/arbutusslab-regular-webfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

/* application de propriétés CSS sur tous les éléments de la page */
* {
    /* Faire en sorte que le padding et la bordure soient calculés à l'interieur du conteneur. On change le mode de calcul à l'aide de box-sizing */
    box-sizing:border-box;
}

html{
    font-size: 62.5%;
}

body{
    font-family: 'Rosario', sans-serif;
    background-color:lightpink;
    /* surcharger les marges appliquées par défault */
    margin:0;
    /* dès lors que l'on ajoute le header en positionnement fixé le contenu du body est "mangé" par la superposition du header, on ajoute une marge intérieure pour corriger ce soucis. */
    padding-top: 10rem;
    /* Taille par defaut pour éviter d'avoir tous les éléments avec une taille non définie à 10px */
    font-size: 1.6rem;
}

/* Les sélecteurs d'éléments HTML */
p {
    color: white;
}

/* Les sélecteurs de classe 
Le . permet de selectionner une classe */
.welcome {
    color: #205765;
}

/* Les sélecteurs d'id
le # permet de selctionner l'id */
#presentation {
    
    /* position du texte */
    text-align: center;
    
    /*background-color:aliceblue;*/
    background-image: url("../img/licorne.jpg");
    
    /* changer la taille du background
    la valeur cover est très pratique puisqu'elle optimise le remplissage en largeur et en hauteur */
    background-size: cover;
    
    /* changer taille police */
    font-size: 2rem;
    
    /* texte en gras */
    font-weight: bold;
    
    /* marges interieures
    sur les 4 côtés */
    padding: 2rem; 
    
    /* marges interieures sur un seul côté */
    padding-bottom: 4rem;
    
    /* 4 valeurs sur la même propriété padding */
    padding: 4rem 2rem 4rem 2rem;
    
    /* notation simplifiée pour l'écriture ci dessus */
    padding : 10rem 2rem;
    
    /* les notations pour le paddings sont les même que pour le margin */
    
    /* se déplacer dans l'image */
    background-position: 25% top;
    
}

.btn{
    color: #205765;
    border-radius: 15%;
    /* enlever le soulignement de mon lien */
    text-decoration: none;
    font-size: 1.6rem;
    /* ajouter une bordure 
    border: taille style couleur
    */
    border: .5rem solid #DCDC69;
    background-color: #DCDC69;
    padding: .5rem 0;
}

/* appliquer des styles uniquement au survol d'un élément */
.btn:hover {
    background-color: #FDFD5B;
    border: .5rem solid #FDFD5B;
}

.welcome spam{
    color: #44B0DF;
    /* Application de la police */
    font-family: 'arbutus_slabregular';
}

h1{
    font-family: 'arbutus_slabregular';
}

header{
    background-color: white;
    margin-bottom: 10rem;
    /* Comment il doit se positionner ? */
    position: fixed;
    /* Où il doit se positionner ? */
    top: 0;
    left: 0;
    /* Par défaut l'élément fié ne prend que l'espace dont il a besoin */
    width: 100%;
    z-index: 1;
}

header img{
    height: 6.2rem;
}

.container{
    /* modifier la taille de notre main */
    max-width: 100rem;
    /* center un bloc */
    margin: 0 auto;
}


main{
    /* modifier la taille de notre main */
    max-width: 100rem;
    /* center un bloc */
    margin: 0 auto;
    background-color:deeppink;
    padding: 1rem;
    /* ajout une ombre portée 
    box-shadow: axe-x axe-y flou couleur*/
    box-shadow: 0 0 2rem #CCCCCC;
}

/* Image responsive */
figure img, figure video, figure iframe{
    width:100%;
    min-height:60rem; 
}


th {
    background-color: cadetblue;
}

nav {
    float: right;
}

nav ul li {
    /* changer le comportement d'affichage d'un élément inline-block : 
    l'élément se comporte en inline avec la possibilité de dimensionner l'élément 
    */
    display: inline-block;
    color: white;
    text-align: center;
    line-height: 3.2rem;
    margin: 0 1rem;
}

nav ul li a{
    text-decoration: none;
    color: #CCCCCC;
}

nav ul li a:hover {
    border-bottom: .2rem solid #44B0DF;
}

/* Casser / Arrêter / Stopper la flotaison */
.clearfix {
    clear:both;
}

/* Flotaison à gauche 
1er exemple : image à gauche, texte à droite 
*/
/* Le selecteur avancé > permet de cibler un enfant direct */
.row figure, .row > p, .col {
    float: left;
    width: 50%;
    /* on surcharge les marges extérieures qui s'appliquent par défaut sur la figure sinon l'élément fait plus de 50% */
    margin: 0;
    padding-top: 1rem;
}

.row p{
    padding-left: 1rem;
}

.col{
    width: 25%;
}

#services{
    text-align: center;
}



h2 {
    font-family: 'arbutus_slabregular';
    font-size: 2.6rem;
    /* mettre en majuscule */
    text-transform: uppercase;
    letter-spacing: .5rem;
    color:#44B0DF;
    text-align: center;
}

h3 {
    /* surcharger la marge par défaut */
    margin-bottom: 0;   
}

hr {
    border: 2px solid #44B0DF;
    width: 50%;
}

#services i{
    /* il s'agit d'une police d'icones nous pouvons donc utiliser toutes les propriétés vues pour les polices (taille, couleur, etc ..)*/
    font-size: 4rem;
    color:#44B0DF;
    
}

#contact{
    text-align: center;
}

/* Propriété position 
    4 valeurs :
        - static : valeur par défaut de tt les éléments.
        Un élément est static est un élément non positionné.
        Un élément avec la propriété position avec une valeur autre que static est un élément positionné.        
        
        - relative : se comporte de la même façon que static sauf que l'élément est positionné. On dispose également des propriétés top, right, bottom et left pour positionner l'élément à un autre endroit que sa position initiale.
        
        - fixed : un élément positionné par rapport à la fenetre du navigateur. Cet élément reste toujours à la même place même si la page défile. 
        On peut considérer que cet élément est en premier plan de notre site.
        un élément fixé ne laisse aucun espace/trace dans la page là où il était placé dans le HTML.

        - absolute : se comporte comme un fixed sauf que son positionnement est relatif à l'élément parent positionné le plus proche au lieu d'être relatif à la fenêtre du navigateur. 
*/

/* Retour en haut de page fixé */
.icone-up {
    position: fixed;
    right: 4rem;
    bottom: 5rem;
    
    padding: .5rem 1.25rem;
    
    background-color: white;
    border: 0 solid white;
    border-radius: 100%;
}
.icone-up i{
    color: #DDDDDD;
    border:0;
    font-size: 4rem;
}

.icone-up:hover {
    background-color: #FF1493;
}

/* Légende superposée à l'image */
figcaption{
    position: absolute;
    bottom:1.4rem;
    left:1rem;
    
    right:1rem;
    
    color: white;
    
    background-color: rgba(0,0,0, .5);
    
    padding: 1rem .5rem;
}

figure{
    position: relative;
}


/* Exemple d'utilisation de FlexBox */
.row-flex{
    display:flex;
    justify-content: space-evenly;
    align-items: stretch;
    flex-wrap: wrap;
}

.col-flex{
    flex-basis: 20%;
    text-align: center;
}

.col-flex > p{
    text-align: justify;
}

.col-flex i, .col-grow i{
    color: #44B0DF;
    border:0;
    font-size: 4rem;
}

.col-grow{
    flex-basis: 20%;
    text-align: center;
    /*flex-grow: 2; /* double la taille */
}

.col-grow > p{
    text-align: justify;
}



/*
Les transitions

Mes transitions sont les animations les plus simples à mettre en place mais aussi les plus basiques.

Les transitions concernent un changement de valeur d'une ou plusieurs propriétés CSS sur un selecteur, le tout avec une certaine transition (accélération, en douceur, etc ...).

Les transitions vont se faire à l'aide de la propriété transition.
Un peu comme la propriété margin ou background par exemple, la propriété transition est une version raccourcie se décomposant en 4 propriétés :
    - transition-property : indique la propriété sur laquelle nous allons appliquer la transition. il existe le mot clé "all" si vous voulez appliquer la transition sur toutes les prorpiétés. 
    - transition-duration : indique la durée de la transition (bien préciser l'unité s pour les secondes ou ms pour millisecondes).
    - transition-timing-function : comment va se dérouler la transition (manière linéaire, lentement puis rapidement, etc...) --> cf http://cubic-bezier.com/ pour visualiser les courbes.
    - transition-delay : le délai avant que la transition démarre (préciser l'unité comme pour transition-duration).

transition:{transition-property}{transition-duration}( eventuellement {transition-timing-function}{transition-delay})


*/

h1{
    opacity: 0.25;
    color:blue;    
    /* 
    la transition se déroule de manière linéaire par défaut 
    
    transition: color 1s;
    
    le mot clé "all" si vous voulez appliquer la transition sur toutes les propriétés (color + opacity dans notre cas)
    
    transition: all 1s;
    
    Transitions multiples
    il est tout à fait possible d'appliquer une transition différente par propriété et cela avec une seule déclaration de la propriété transition
    */
    transition: opacity 0.5s, color 1s linear 0.5s;

}

h1:hover{
    opacity: 1;
    color: red;
}

/* 
Les animations

1/ Définir l'animation
Avant toute utilisation d'une animation, elle doit être définie et avoir un nom.
On utilise @keyframes pour définir le nom de l'animation ainsi qque les différentes étapes de cette animation :

@keyframes monAnimation { ... }

Pour définir les différentes étapes de l'animation il faut indiquer à quel pourcentage d'avancement de l'animation nous souhaitons appliquer les propriétés CSS.
0% étant le début et 100% la fin donc 50% sera le milieu de l'animation...

@keyframes monAnimation{
    0%{
        color: blue;
    }
    50% {
     color: yellow;
    }
    100% {
    color:red;
    }
}

2/ Appliquer l'animation préalablement définie sur l'élément souhaité
Pour cela 2 propriétés indispensables:
    - animation-name : nom donné à l'animation lors de sa définition
    - animation-duration : durée de l'animation (avec l'unité "s" ou "ms")

h1{
    animation-name: monAnimation;
    animation-duration: 3s;
}

Il est possible de config certains options de l'animation:
    - animation-delay : démarrer l'animation après un laps de temps donnée
    - animation-timing-function : déroulement de l'animation (animation linéaire ou non)
    - animation-iteration-count : nombre de fois que dois se jouer l'animation (de 1 à l'infini)
    pour la valeur infini on utilisera le mot-clé "infinite"
    - animation-direction : determiner le sens de l'animation
        * du début à la fin (par défaut)
        * reverse : de la fin au début
        * alternate : alterné le sens de l'animation
    - animation-fill-mode : définir les valeurs conservées par l'élément après l'éxécution de l'animation
        * cas par défaut : reprend la valeur définie en dehors de l'animation
        * forwards : permet de conserver les valeurs de la finde l'animation
        * backwards : permet de conserver les valeurs du début de l'animation
        

*/

/* Définition d'une animation */
@keyframes rainbowColor{
    0%{
        /*font-size: 200%;*/
        color:red;
    }
    20%{
        color: orange;
    }
    40% {
        color: yellow;
    }
    60%{
        color:green;
    }
    80% {
        color:blue;
    }
    100%{
        color:blueviolet;
    }
}

/*
Ci-dessous:
1/ On appelle l'animation précédemment créer rainbowColor
2/ On demande que chaque itération de l'animation se fasse en 3 secondes
3/ On demande que l'animation s'éxécute 3 fois
4/ On demande d'alterner le sens de l'animation à chaque itération
5/ On demande de garder la couleur de fin de la dernière itération de l'animation (violet)
*/
 #presentation p{
    animation-name: rainbowColor;
    animation-duration: 1s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-fill-mode: forwards;
}

/* 
Les transformations

Les transformations permettent aussi bien d'agir en 2D qu'en 3D sur un élément et vont permettre d'appliquer un certain nombre d'effets.
Pour définir une transformation il faut utiliser la propriété transform, la valeur de cette propriété sera la fonction de transformation que l'on souhaite appliquer

Quelques fonctions de transformations utiles :
    -translateX('n'px) : déplace l'élément horizontalement de 'n' px
    -translateY('n'px) : déplace l'élément verticalement de 'n' px
    -translete(10px, 20px) : déplacement de l'élément horizontalement de 10px et verticalement de 20px en même temps

    -rotate(180deg): application une rotation de 180 degrés. la valeur peut être en degrés ou en tour.
    exemple: 180deg = 0.5turn ou 360deg = 1turn

    - scale(1.5): modifie le zoom d'un élément (exemple: 1.5 signifie un zoom de 150% sachant que la valeur 1 signifie non zoomé)
    De même si on met une valeur inférieur à 1 on ne zomm plus on dézoom !

    - skewX(45deg), skewY(45deg), skew(45deg, 90deg) : permet d'obliquer un élément
    Attention : 
        skew(ax)
        skew(ax, ay)

*/

figure{
    /* overflow avec la valeur hidden permet de masquer ce qui "dépasse" du conteneur sur l'axe x et sur l'axe y */
    overflow: hidden;
}

figure img{
    transition: transform 1s;
}

/*
exemple 1 : rotation
exemple 2 : translation de l'image vers le haut de 7px car valeur négative
exemple 3 : zoom avec rotation
*/
figure img:hover{
    /*transform: rotate(1turn);*/
    /*transform: translateY(-7px);*/
    transform: scale(1.5) rotate(4turn);
    box-shadow: 0 0 2rem pink;
}

/* MEDIA QUERIES 

Synthaxe d'une media query 

le type de media permet de spécifier sur quel appareil va s'appliquer les styles par exemple :
- screen --> écrans couleurs
- print --> version imprimable
                    borne minimale          borne maximale
                            |                   |
                            V                   V*/
/*@media screen and (min-width: 576px) and (max-width: 767px){
    p {
        color: aqua;
        font-size: 2rem;
    }
}*/

/* Réagencement de blocs */
@media screen and (min-width: 576px) and (max-width:991px){
    /* Tablette et fablette */
    .col-flex{
        flex-basis: 50%;
    }
}

@media screen and (max-width:575px){
    /* Mobile */
    .col-flex{
        flex-basis: 100%;
    }
}